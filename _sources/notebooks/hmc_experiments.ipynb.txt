{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import sklearn.datasets\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "data = sklearn.datasets.covtype.fetch_covtype()\n",
    "x = data.data#.astype(np.float32)\n",
    "y = data.target\n",
    "\n",
    "x = x - x.mean(0)\n",
    "x = x / x.std(0)\n",
    "\n",
    "N = x.shape[0]\n",
    "D = x.shape[1] + 1\n",
    "\n",
    "# Add a constant column for the intercept\n",
    "x = np.hstack([x, np.ones([N, 1])])#, np.float32)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Which category to binarize on\n",
    "values, counts = np.unique(y, return_counts=True)\n",
    "binarize_on = np.argmax(counts)\n",
    "y = (y == binarize_on)#.astype(np.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "step_size = np.sqrt(0.5 / N)\n",
    "n_steps = 10\n",
    "n_iterations = 1000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Edward code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "sys.path.insert(0, '/usr/local/google/home/mhoffman/research/edward/')\n",
    "\n",
    "import edward as ed\n",
    "\n",
    "# Hack for backwards compatibility\n",
    "# tf.select = tf.where\n",
    "\n",
    "ed.set_seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration    1 [  0%]: Acceptance Rate = nan\n",
      "Iteration  100 [ 10%]: Acceptance Rate = 1.00\n",
      "Iteration  200 [ 20%]: Acceptance Rate = 0.96\n",
      "Iteration  300 [ 30%]: Acceptance Rate = 0.96\n",
      "Iteration  400 [ 40%]: Acceptance Rate = 0.96\n",
      "Iteration  500 [ 50%]: Acceptance Rate = 0.97\n",
      "Iteration  600 [ 60%]: Acceptance Rate = 0.97\n",
      "Iteration  700 [ 70%]: Acceptance Rate = 0.97\n",
      "Iteration  800 [ 80%]: Acceptance Rate = 0.97\n",
      "Iteration  900 [ 90%]: Acceptance Rate = 0.97\n",
      "Iteration 1000 [100%]: Acceptance Rate = 0.97\n",
      "took 56.958 seconds\n"
     ]
    }
   ],
   "source": [
    "# MODEL\n",
    "tf_x = tf.Variable(x.T, trainable=False)\n",
    "\n",
    "# Standard normal prior on coefficients\n",
    "beta = ed.models.Normal(mu=tf.zeros(D), sigma=tf.ones(D))\n",
    "\n",
    "logit_pred = tf.squeeze(tf.matmul(tf.expand_dims(beta, 0), tf_x))\n",
    "ed_y = ed.models.BernoulliWithSigmoidP(p=logit_pred)\n",
    "\n",
    "# INFERENCE\n",
    "qbeta = ed.models.Empirical(params=tf.Variable(tf.zeros([n_iterations, D])))\n",
    "inference = ed.HMC({beta:qbeta}, data={ed_y:y})\n",
    "t0 = time.time()\n",
    "inference.run(step_size=step_size, n_steps=n_steps)\n",
    "\n",
    "ed_time = time.time() - t0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edward took 56.958 seconds\n"
     ]
    }
   ],
   "source": [
    "print 'Edward took %.3f seconds' % ed_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fbfdc5d8210>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n+g+Vp8PwYdFl7QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fc0af7f4210>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sess = ed.get_session()\n",
    "ed_samples = sess.run(qbeta.params)\n",
    "plot(ed_samples[:, 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Handwritten HMC code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def leapfrog(logp_grad, step_size, z, momentum, last_grad):\n",
    "    momentum = momentum + 0.5 * step_size * last_grad\n",
    "    z = z + step_size * momentum\n",
    "    logp, grad = logp_grad(z)\n",
    "    momentum = momentum + 0.5 * step_size * grad\n",
    "    return z, momentum, logp, grad\n",
    "\n",
    "def hmc_update(logp_grad, last_z, step_size, n_steps):\n",
    "    D = len(last_z)\n",
    "    logp, grad = logp_grad(last_z)\n",
    "    momentum = np.random.randn(D).astype(np.float32)\n",
    "    new_momentum = momentum.copy()\n",
    "    new_z = last_z.copy()\n",
    "    new_grad = grad.copy()\n",
    "    for l in xrange(n_steps):\n",
    "        new_z, new_momentum, new_logp, new_grad = leapfrog(logp_grad, step_size, new_z, new_momentum, new_grad)\n",
    "    alpha = -0.5 * np.square(new_momentum).sum() + new_logp\n",
    "    alpha -= -0.5 * np.square(momentum).sum() + logp\n",
    "    if np.log(np.random.rand()) < alpha:\n",
    "        z = new_z\n",
    "    else:\n",
    "        z = last_z\n",
    "    return z\n",
    "\n",
    "def logp_grad(beta):\n",
    "    logp = -0.5 * np.square(beta).sum()\n",
    "    logit_preds = x.dot(beta)\n",
    "    y_logit_preds = (2*y-1) * logit_preds\n",
    "    logp += -np.log(1 + np.exp(-y_logit_preds)).sum()\n",
    "    grad = -beta\n",
    "    grad += ((2*y-1) * scipy.special.expit(-y_logit_preds)).dot(x)\n",
    "    return logp, grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n",
      "260\n",
      "270\n",
      "280\n",
      "290\n",
      "300\n",
      "310\n",
      "320\n",
      "330\n",
      "340\n",
      "350\n",
      "360\n",
      "370\n",
      "380\n",
      "390\n",
      "400\n",
      "410\n",
      "420\n",
      "430\n",
      "440\n",
      "450\n",
      "460\n",
      "470\n",
      "480\n",
      "490\n",
      "500\n",
      "510\n",
      "520\n",
      "530\n",
      "540\n",
      "550\n",
      "560\n",
      "570\n",
      "580\n",
      "590\n",
      "600\n",
      "610\n",
      "620\n",
      "630\n",
      "640\n",
      "650\n",
      "660\n",
      "670\n",
      "680\n",
      "690\n",
      "700\n",
      "710\n",
      "720\n",
      "730\n",
      "740\n",
      "750\n",
      "760\n",
      "770\n",
      "780\n",
      "790\n",
      "800\n",
      "810\n",
      "820\n",
      "830\n",
      "840\n",
      "850\n",
      "860\n",
      "870\n",
      "880\n",
      "890\n",
      "900\n",
      "910\n",
      "920\n",
      "930\n",
      "940\n",
      "950\n",
      "960\n",
      "970\n",
      "980\n",
      "990\n",
      "Numpy (CPU) took 534.883 seconds\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "beta = np.zeros(D, np.float32)\n",
    "np_samples = []\n",
    "for i in xrange(n_iterations):\n",
    "    if i % 10 == 0:\n",
    "        print i\n",
    "    beta = hmc_update(logp_grad, beta, step_size, n_steps)\n",
    "    np_samples.append(beta)\n",
    "np_samples = np.array(np_samples)\n",
    "print 'Numpy (CPU) took %.3f seconds' % (time.time() - t0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fbfe427c150>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nw8zMzEr1H6es/t4Br9G/AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbfdc591bd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(np_samples[:, 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyStan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pystan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:pystan:COMPILING THE C++ CODE FOR MODEL anon_model_976aaa495a9359c3216a14ee7a2eb583 NOW.\n"
     ]
    }
   ],
   "source": [
    "model_code = '''\n",
    "data {\n",
    "    int N;\n",
    "    int D;\n",
    "    \n",
    "    int y[N];\n",
    "    matrix[N, D] x;\n",
    "}\n",
    "parameters {\n",
    "    vector[D] beta;\n",
    "}\n",
    "model {\n",
    "    beta ~ normal(0, 1);\n",
    "    y ~ bernoulli_logit(x * beta);\n",
    "}\n",
    "'''\n",
    "model = pystan.StanModel(model_code=model_code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stan (CPU, single-threaded) took 1952.880 seconds\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "control = {'stepsize':step_size, 'int_time':n_steps*step_size,\n",
    "           'adapt_engaged':False, 'stepsize_jitter':0, 'metric':'unit_e'}\n",
    "fit = model.sampling(data={'N':N, 'D':D, 'y':y.astype(np.int32), 'x':x},\n",
    "                     warmup=0, verbose=True, chains=1, iter=n_iterations, algorithm='HMC', init=0,\n",
    "                     control=control)\n",
    "stan_time = time.time() - t0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stan (CPU, single-threaded) took 1952.880 seconds (34.286 Edward time)\n"
     ]
    }
   ],
   "source": [
    "print 'Stan (CPU, single-threaded) took %.3f seconds (%.3f Edward time)' % (stan_time, stan_time / ed_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhsAAAFkCAYAAACJu/k0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzsnXmYHUW5/781WzYgASIJApdFQBL2BIKgKCKyCAIqIAMB\nQTZZFAMoF5RFMXJVJCoGRX4IKBBRQAkXIQgiigZUQlgkKMoSCZsJECBkm5n6/VHz3q5Tp6q7+qzT\n53w/zzPPmdOnl+rqWr791ltvKa01CCGEEELqRUezE0AIIYSQ1oZigxBCCCF1hWKDEEIIIXWFYoMQ\nQgghdYVigxBCCCF1hWKDEEIIIXWFYoMQQgghdYVigxBCCCF1hWKDEEIIIXWFYoMQQgghdSWX2FBK\nnaOU+rNS6g2l1MtKqV8qpbaMOO5QpdQCpdRypdQjSqn9rN+6lFLfUEo9qpR6Sym1SCl1rVJq/Upu\niBBCCCFDi7yWjd0BXAZgFwB7AegGcJdSakToAKXUrgBuAHAlgB0A/ArAr5RSEwd3GTm4/SsAdgTw\nMQDvBnBrzrQRQgghZAiiqlmITSk1FsArAN6vtb4/sM/PAIzUWh9obZsL4GGt9SmBY3YC8CCAjbXW\nz1ecQEIIIYQ0nWp9NsYA0ABeTdlnVwB3O9vmDG7POu/rVaWOEEIIIU2nq9IDlVIKwHcA3K+1fiJl\n1/EAXna2vTy43XfeYQD+B8ANWuu3Uq6/LoB9ADwLYEV8ygkhhJC2ZziATQDM0VovqffFKhYbAC4H\nMBHAeys4VsFYLko3KtUF4BeDv3mHWCz2AXB9BdcmhBBCiOFIGL/KulKR2FBKfR/ARwDsrrV+MWP3\nlwCMc7atB8faYQmNjQDsmWbVGORZALjuuuswYcKEyJSTapk2bRpmzJjR7GS0FczzxsM8bzzM88ay\nYMECTJ06FRjsS+tNbrExKDQOAvABrfXCiEPmAvgQgO9Z2z48uF3OKUJjMwAf1Fq/FnHeFQAwYcIE\nTJo0KTL1pFpGjx7N/G4wzPPGwzxvPMzzptEQN4RcYkMpdTmAXgAHAlimlBKLxVKt9YrBfa4FsEhr\nfe7gb98FcJ9S6gwAtw8ePxnACYP7dwK4GWb66wEAuq3zvqq1Xl3pzRFCCCGk+eSdjfIZAGsB+B2A\nF6y/w6x9NoLl/Km1ngsjME4EMB/AxwEcZDmVbggjMjYc/P0FAC8OfqbNWCGEEEJIAchl2dBaZ4oT\nrfWenm03w1gvfPs/B6AzTzoIIYQQUhy4NgrJRW9vb7OT0HYwzxsP87zxMM9bm6oiiDYTpdQkAA89\n9NBDdCoihBBCcjBv3jxMnjwZACZrrefV+3q0bBBCCCGkrlBsEEIIIaSuUGwQQgghpK5QbBBCCCGk\nrlBsEEIIIaSuUGwQQgghpK5QbBBCCCGkrlBsEEIIIaSuUGwQQgghpK5QbBBCCCGkrlBsEEIIIaSu\nUGwQQgghpK5QbBBCCCGkrlBsEEIIIaSuUGwQQgghpK5QbBBCCCGkrlBsEEIIIaSuUGwQQgghpK5Q\nbBBCCCGkrlBsEEIIIaSuUGwQQgghpK5QbBBCCCGkrlBsEEIIIaSuUGwQQgghpK5QbBBCCCGkrlBs\nEEIIIaSuUGwQQgghpK5QbJC25L77gDffbHYqCCGkPaDYIG3JHnsAxx3X7FQQQkh7QLFB2o6BAfP5\n3HPNTQchhLQLFBuk7RCxoVRz00EIIe1CLrGhlDpHKfVnpdQbSqmXlVK/VEptGXHcoUqpBUqp5Uqp\nR5RS+3n2+apS6gWl1NtKqd8opTbPkzZCYunvb3YKCCGkvchr2dgdwGUAdgGwF4BuAHcppUaEDlBK\n7QrgBgBXAtgBwK8A/EopNdHa52wApwE4CcAUAMsAzFFK9eRMHyGZiNjooF2PEEIaQleenbXWH7G/\nK6WOAfAKgMkA7g8cdjqAO7TWlw5+v0AptTeMuDjF2ucirfVtg+c9GsDLAA4G8PM8aSQkCxEbHEYh\nhJDGUO273RgAGsCrKfvsCuBuZ9ucwe1QSm0GYDyAe+RHrfUbAB6UfQipJbRsEEJIY6m4uVVKKQDf\nAXC/1vqJlF3Hw1gpbF4e3A4A42AES9o+hNQMWjYIIaSx5BpGcbgcwEQA763gWAUjMKrdh5DcUGwQ\nQkhjqUhsKKW+D+AjAHbXWr+YsftLMNYLm/WQWDJeghEW41Bq3VgPwMNZaZk2bRpGjx5dsq23txe9\nvb1Zh5I2hcMohJB2YtasWZg1a1bJtqVLlzY0DbnFxqDQOAjAB7TWCyMOmQvgQwC+Z2378OB2aK2f\nUUq9NLjPo4PXWAtmxsvMrJPPmDEDkyZNynUPpL2hZYMQ0k74XsDnzZuHyZMnNywNucSGUupyAL0A\nDgSwTCklFoulWusVg/tcC2CR1vrcwd++C+A+pdQZAG4fPH4ygBOsU38HwJeVUv8E8CyAiwA8D+DW\n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\nSqndlVKzlVKLlFIDSqkDI445VSn1hFLqbaXUAqXUUZ59Dh38bblS6hGl1H5500YIaR8oNggpDpVY\nNkYBmA/gVAA6a2el1MkApgM4H8BEABcCmKmU2t/aZ1cANwC4EsAOAH4F4FdKqYkVpI8QQgghQ4iu\nvAdore8EcCcAKBX1bjEVwBVa65sGvz+rlNoZwNkAbh/cdjqAO7TWlw5+v0AptTeA0wCckjeNhJDW\nh5YNQopDI3w2hgFY4WxbAWCKUqpz8PuuAO529pkzuJ0QQsqg2CCkODRCbMwBcLxSahIAKKV2AnAc\ngG4AYwf3GQ/gZee4lwe3E0JIGRQbhBSH3MMoFXARgHEA5iqlOgC8BOAaAF8E0J9ynEKET8i0adMw\nevTokm29vb3o7e2tNL2EEEJIyzBr1izMmjWrZNvSpUsbmoa6iw2t9QoYy8ZJMKLjRQAnAXhTa714\ncLeXBn+zWQ/l1o4yZsyYgUmTJtUwxYSQIkDLBiFx+F7A582bh8mTJzcsDQ2Ls6G17tdav6C11gAO\nB3Cb9fNcAB9yDvnw4HZCCPk/GGeDkOKR27KhlBoFYHOYYQ4A2EwptT2AV7XW/1ZKXQzgnVrrTw3u\nvwWAKQAeBLAOgDMAbA3gaOu03wVwn1LqDJgZKr0AJgM4oaK7IoS0PBQbhBSHSiwbOwF4GMBDMD4V\n3wYwD8BXBn8fD2Aja/9OAGfCxOaYA6AHwG5a64Wyg9Z6LozAOHFwv48DOEhr/UQF6SOEtDAUGYQU\nj0ribNyHFJGitT7W+f4kgEynCq31zQBuzpseQkh7wWEUQooH10YhhBQSig1CigPFBiGkUNCyQUjx\noNgghBQSig1CigPFBiGkUFBkEFI8KDYIIYWCwyiEFA+KDUJIIaHYIKQ4UGwQQgoJxQYhxYFigxBC\nCCF1hWKDEFIoPvYx80nLBiHFgWKDEFIozj4bWLmy2akghOSBYoMQUiiUAnp6mp0KQkgeKDYIIYQQ\nUlcoNgghhBBSVyg2CCGEEFJXKDYIIYQQUlcoNgghhBBSVyg2CCGEEFJXKDYIIYQQUlcoNgghhBBS\nVyg2CCGEEFJXKDYIIYQQUlcoNgghhBBSVyg2CCGEEFJXKDYIIYQQUlcoNgghhBBSVyg2CCGEEFJX\nKDYIIYQQUlcoNgghhBBSVyg2CCGEEFJXKDYIIYQQUlcoNgghhBBSVyg2CCGEEFJXKDZILmbNmtXs\n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\ns0b9Dymfhq9NM2IkAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbf6eba1390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nPwGI/e+zn43Apn//2KcGDYoL61Zbxb557bWx7w0fHgELxPll7Ng4TldeOYKwRx4pXvdxx8VnvWxZ\nBCsjRsR55FOfiovUww9HutVWi4AF4ny18soRXEJ8YRk3LoKJO+6IQGDPPWNdL70UaYYPjyCidP1b\nbQXPPtuyThoaYj19+8Z5bvDgCAx++9s4JsoZPTrOQwMHxjG23npxwb311gjC1l47tun556NO+/eP\nMhc0MWLEBOaW3KZy8MGRB8R+sPXWhX03deSR8Tm89lr5c39bDjoojsO0rtuy775w773F044+Op6X\nLo1te/LJwryxY+Nc9eyz8dnus08EImaRHuL1tGnFy0EE/KuuGl8CIL60/vOfhXXOnx/H1siRhfo4\n5pg45gYMgOuuK84vPVYg6nCrrWbQ1NQI8aPAM6g0d9ejiw/iLyj8gQeme5zK3Zcv949de61/PB3c\nGxvd33475i1f7r50aTy//LIX+d//jfSjRxfSXnFFcV5PPx3zbrwx3q+1lvuDDxanSR8bb+y+eLH7\nBx/EMr/4hfsjj7hvu23M/8EPCutevNj9jjsKyx54YOH1aadFmo8+Ki7v8uXu77/vLSxdGusG94YG\n95decr//fve77irk+ZWvFOrt+OPdTz89lt1kk+Jt+PWvW27XlCkt1/nuu4X5b74Z0/beO94//HD5\n+pkyxf1734vXxx0X279sWcu83d0PPjjS/exn5fM67LB43mijwjInnuh+wQXF+Tz+ePnlx44tvD78\n8OJlrroqpl92mfucOcXLfepT5cu7997ugweXX9eBB5Yvz1/+EtMWLSrMX7Iknu+7z/2WW+Kzffpp\n9+HDY5m77475CxYUlrnoopi37bbx/vbbi9fv7v4//xOvv//9eP/hh4X5hxziftRRhffrrhvre/31\n8tuz/vqFYyMt15e+FPt0ufRpGV56yX3VVd2POCLSL1zofvbZxemefDLS3nJL8fTx42PffeGFQh2l\nFi+OfRDcN9ggpv3gB+XL8eyzMf+hh4rLdv/9cewvXlyc94svtpyWHs9XXuk+e7b7oEHuM2YUp1m+\n3P0f/3Bfc81Ie/LJhXn33x/TLr64eFv+8peYvtNOhbKl55LTT4/3Bx1USP/GG4Xlv//9mH/SSbHP\nuLufdVbxtn/ta+733NOyTrL7Ulbpee688wplO/bYlumXLHG/+eZCmd3jvPnWW1GHpfvlySfH89FH\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbf6e729c90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stan_samples = fit.extract()['beta']\n",
    "plot(stan_samples[:, 0])\n",
    "show()\n",
    "plot(fit.extract()['lp__'])\n",
    "show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyMC3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pymc3\n",
    "import theano\n",
    "import theano.tensor as T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pymc3.math\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Automatic pdb calling has been turned ON\n"
     ]
    }
   ],
   "source": [
    "%pdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/twiecki/anaconda/lib/python3.5/site-packages/theano/tensor/basic.py:2147: UserWarning: theano.tensor.round() changed its default from `half_away_from_zero` to `half_to_even` to have the same default as NumPy. Use the Theano flag `warn.round=False` to disable this warning.\n",
      "  \"theano.tensor.round() changed its default from\"\n",
      " 13%|█▎        | 129/1000 [02:44<20:06,  1.38s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pymc (CPU multithreaded) took 166.318 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "basic_model = pymc3.Model()\n",
    "\n",
    "with basic_model:\n",
    "    pymc_beta = pymc3.Normal('beta', mu=0, sd=1, shape=D)\n",
    "    pymc_y = pymc3.Bernoulli('y', p=pymc3.math.sigmoid(pymc3.math.dot(x, pymc_beta)), observed=y)\n",
    "\n",
    "    step = pymc3.HamiltonianMC()#step_scale=step_size*(1./D)**(-1./4), path_length=step_size*n_steps,\n",
    "                               #step_rand=lambda x:x, scaling=np.ones(D))#, np.float32))\n",
    "    t0 = time.time()\n",
    "    pymc_samples = pymc3.sample(n_iterations, step=step, init=None, njobs=1)\n",
    "pymc_time = time.time() - t0\n",
    "print('pymc (CPU multithreaded) took %.3f seconds' % pymc_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PyMC3 (CPU, multi-threaded) took 1785.090 seconds (31.341 Edward time)\n"
     ]
    }
   ],
   "source": [
    "print 'PyMC3 (CPU, multi-threaded) took %.3f seconds (%.3f Edward time)' % (pymc_time, pymc_time / ed_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fbf6e7fbe50>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbf6ec17c90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(pymc_samples.get_values('beta')[:, 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Handwritten code with TF for gradients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def leapfrog(logp_grad, step_size, z, momentum, last_grad):\n",
    "    momentum = momentum + 0.5 * step_size * last_grad\n",
    "    z = z + step_size * momentum\n",
    "    logp, grad = logp_grad(z)\n",
    "    momentum = momentum + 0.5 * step_size * grad\n",
    "    return z, momentum, logp, grad\n",
    "\n",
    "def hmc_update(logp_grad, last_z, step_size, n_steps):\n",
    "    D = len(last_z)\n",
    "    logp, grad = logp_grad(last_z)\n",
    "    momentum = np.random.randn(D).astype(np.float32)\n",
    "    new_momentum = momentum.copy()\n",
    "    new_z = last_z.copy()\n",
    "    new_grad = grad.copy()\n",
    "    for l in xrange(n_steps):\n",
    "        new_z, new_momentum, new_logp, new_grad = leapfrog(logp_grad, step_size, new_z, new_momentum, new_grad)\n",
    "    alpha = -0.5 * np.square(new_momentum).sum() + new_logp\n",
    "    alpha -= -0.5 * np.square(momentum).sum() + logp\n",
    "    if np.log(np.random.rand()) < alpha:\n",
    "        z = new_z\n",
    "    else:\n",
    "        z = last_z\n",
    "    return z\n",
    "\n",
    "g = tf.Graph()\n",
    "with g.as_default():\n",
    "    with tf.device('/gpu:0'):\n",
    "        tf_beta = tf.placeholder(np.float32, shape=D, name='beta')\n",
    "        tf_x = tf.Variable(x.T, trainable=False)\n",
    "        tf_y = tf.Variable(y, trainable=False)\n",
    "        tf_logit_preds = tf.matmul(tf.expand_dims(tf_beta, 0), tf_x)\n",
    "        tf_y_logit_preds = (2. * tf_y - 1.) * tf_logit_preds\n",
    "        tf_logp = -tf.reduce_sum(tf.nn.softplus(-tf_y_logit_preds))\n",
    "        tf_logp -= 0.5 * tf.reduce_sum(tf.square(tf_beta))\n",
    "        tf_grad = tf.gradients(tf_logp, tf_beta)[0]\n",
    "    initializer = tf.initialize_all_variables()\n",
    "    sess = tf.Session()\n",
    "    sess.run(initializer)\n",
    "\n",
    "def logp_grad(beta):\n",
    "#     return sess.run([tf_logp, tf_grad], {tf_beta: beta[:, np.newaxis]})\n",
    "    return sess.run([tf_logp, tf_grad], {tf_beta: beta})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 loops, best of 3: 5.05 ms per loop\n"
     ]
    }
   ],
   "source": [
    "beta = np.zeros(D, np.float32)\n",
    "# %timeit logp_grad(beta)\n",
    "%timeit sess.run(tf_grad, {tf_beta:beta})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TF (GPU) took 5.855 seconds\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "beta = np.zeros(D, np.float32)\n",
    "samples = []\n",
    "for i in xrange(100):\n",
    "    beta = hmc_update(logp_grad, beta, np.sqrt(step_size), n_steps)\n",
    "    samples.append(beta)\n",
    "samples = np.array(samples)\n",
    "print 'TF (GPU) took %.3f seconds' % (time.time() - t0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fd0f827bad0>]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n1DCdndwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fd0f829a810>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(samples[:, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The slowest run took 6.52 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
      "1 loop, best of 3: 44 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%timeit logp_grad(beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7faa64137210>]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nMdEoqQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa3039b610>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(samples[:, 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Handwritten code with Theano for gradients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using gpu device 0: TITAN X (Pascal) (CNMeM is disabled, cuDNN 5105)\n",
      "/usr/local/lib/python2.7/dist-packages/theano/sandbox/cuda/__init__.py:600: UserWarning: Your cuDNN version is more recent than the one Theano officially supports. If you see any problems, try updating Theano or downgrading cuDNN to version 5.\n",
      "  warnings.warn(warn)\n"
     ]
    }
   ],
   "source": [
    "import theano\n",
    "import theano.tensor as T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def leapfrog(logp_grad, step_size, z, momentum, last_grad):\n",
    "    momentum = momentum + 0.5 * step_size * last_grad\n",
    "    z = z + step_size * momentum\n",
    "    logp, grad = logp_grad(z)\n",
    "    momentum = momentum + 0.5 * step_size * grad\n",
    "    return z, momentum, logp, grad\n",
    "\n",
    "def hmc_update(logp_grad, last_z, step_size, n_steps):\n",
    "    D = len(last_z)\n",
    "    logp, grad = logp_grad(last_z)\n",
    "    momentum = np.random.randn(D).astype(np.float32)\n",
    "    new_momentum = momentum.copy()\n",
    "    new_z = last_z.copy()\n",
    "    new_grad = grad.copy()\n",
    "    for l in xrange(n_steps):\n",
    "        new_z, new_momentum, new_logp, new_grad = leapfrog(logp_grad, step_size, new_z, new_momentum, new_grad)\n",
    "    alpha = -0.5 * np.square(new_momentum).sum() + new_logp\n",
    "    alpha -= -0.5 * np.square(momentum).sum() + logp\n",
    "    if np.log(np.random.rand()) < alpha:\n",
    "        z = new_z\n",
    "    else:\n",
    "        z = last_z\n",
    "    return z\n",
    "\n",
    "def make_logp_grad():\n",
    "    beta = T.vector('beta')\n",
    "    t_x = theano.shared(x)\n",
    "    t_y = theano.shared(y)\n",
    "    logit_preds = t_x.dot(beta)\n",
    "#     y_logit_preds = (2*t_y-1) * logit_preds\n",
    "#     logp = -T.log(1 + T.exp(-y_logit_preds)).sum()\n",
    "    logp = -0.5 * T.square(logit_preds - y).sum()\n",
    "    logp -= 0.5 * T.square(beta).sum()\n",
    "    grad = T.grad(logp, beta)\n",
    "    return theano.function([beta], [logp, grad])\n",
    "\n",
    "logp_grad = make_logp_grad()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 loops, best of 3: 3.45 ms per loop\n"
     ]
    }
   ],
   "source": [
    "beta = np.zeros(D, np.float32)\n",
    "%timeit logp_grad(beta)\n",
    "# while True:\n",
    "#     logp_grad(beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Theano (GPU) took 4.471 seconds\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "beta = np.zeros(D, np.float32)\n",
    "samples = []\n",
    "for i in xrange(100):\n",
    "    beta = hmc_update(logp_grad, beta, np.sqrt(step_size), n_steps)\n",
    "    samples.append(beta)\n",
    "samples = np.array(samples)\n",
    "print 'Theano (GPU) took %.3f seconds' % (time.time() - t0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def leapfrog(logp_grad, step_size, z, momentum, last_grad):\n",
    "    momentum = momentum + 0.5 * step_size * last_grad\n",
    "    z = z + step_size * momentum\n",
    "    logp, grad = logp_grad(z)\n",
    "    momentum = momentum + 0.5 * step_size * grad\n",
    "    return z, momentum, logp, grad\n",
    "\n",
    "def hmc_update(logp_grad, last_z, step_size, n_steps):\n",
    "    D = len(last_z)\n",
    "    logp, grad = logp_grad(last_z)\n",
    "    momentum = np.random.randn(D).astype(np.float32)\n",
    "    new_momentum = momentum.copy()\n",
    "    new_z = last_z.copy()\n",
    "    new_grad = grad.copy()\n",
    "    for l in xrange(n_steps):\n",
    "        new_z, new_momentum, new_logp, new_grad = leapfrog(logp_grad, step_size, new_z, new_momentum, new_grad)\n",
    "    alpha = -0.5 * np.square(new_momentum).sum() + new_logp\n",
    "    alpha -= -0.5 * np.square(momentum).sum() + logp\n",
    "    if np.log(np.random.rand()) < alpha:\n",
    "        z = new_z\n",
    "    else:\n",
    "        z = last_z\n",
    "    return z\n",
    "\n",
    "def make_logp_grad():\n",
    "    beta = T.matrix('beta')\n",
    "    t_x = theano.shared(x.T)\n",
    "    t_y = theano.shared(np.repeat(y[:, np.newaxis], 2, 1).T)\n",
    "    logit_preds = beta.dot(t_x)\n",
    "#     logit_preds = t_x.dot(beta)\n",
    "    y_logit_preds = (2*t_y-1) * logit_preds\n",
    "    logp = -T.log(1 + T.exp(-y_logit_preds)).sum()\n",
    "    logp -= 0.5 * T.square(beta).sum()\n",
    "    grad = T.grad(logp, beta)\n",
    "    return theano.function([beta], [logp, grad])\n",
    "\n",
    "logp_grad = make_logp_grad()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 loops, best of 3: 40.5 ms per loop\n"
     ]
    }
   ],
   "source": [
    "beta = np.zeros([2, D], np.float32)\n",
    "%timeit logp_grad(beta)\n",
    "# while True:\n",
    "#     logp_grad(beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Theano (GPU) took 4.471 seconds\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "beta = np.zeros(D, np.float32)\n",
    "samples = []\n",
    "for i in xrange(100):\n",
    "    beta = hmc_update(logp_grad, beta, np.sqrt(step_size), n_steps)\n",
    "    samples.append(beta)\n",
    "samples = np.array(samples)\n",
    "print 'Theano (GPU) took %.3f seconds' % (time.time() - t0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f1ef5739450>]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ndM01lcu4S1/7mvSd73R5FVdKN98c28577qlcZvz4OGBzlx54oHK5s8+WDj54xdsGLlkiffrT0q23\nVi/3xBPSQw91T51WdJkKGZWGS5LzMaTKv5Xx8MPx70MPRaKv5Fvfkr785epHYdddF6Hlz39ud9W7\nxf/+V+sarHxmz67e/byyeffd2ID36CFddVXlcn/4Q/x7772Vy0yaJL3xRmzwJ0/u0mqudNylG2+M\nAPHgg5W3bw8/LA0fLg0bJt13X/kyy5ZJf/1rTOOvf02vzsVuuEE6/vjln84990gvvST97neVy7hL\nhx0m7b9/9X0FQiZDRulwSWlPhtT6vIyHH5Y+8Ykoe/315af/zDPSU0/Fex9/vHyZpUtjQe3ZM1ba\nSpYtk7761ZhmNU1N5W/6Vlrm9derl3n88QhYN91UvVw51QIVKrvjjujR+uEPa9eG99wjXXppbeZd\nzuWXx2/VnH12nEA4Y0brMjNmRFf70KGx3M6dW35a994bBxDrrCNde+3y1WvxYunKKwvncK1sJk6U\npkyRfvQjaeZM6cUXW5dxj56MPfaQvvSl6Mkot20aNy6+s003lW67LfWqa+lS6dRTIxg8/XTlcu4x\njFPNtdfG8vnYY9K0aeXLPP54DPmZSSec0Pl6J3V67LH4DJnl7iv0n6RhknzChAk+YYK75P7ss/6R\nI4903267wuOFC6PMjTd6C5/4hPtxx7kfcYT7Zpu5Nzd7K4cd5r7ppu4bbuh+7LGtX3d3v//+mP7P\nfhb/vvxy+XI33xyvH3hg+dcTe+/tvt9+1cuceKJ7r16V55XLue+8c8xvyJDyn63Ua6+5X3xxvK9n\nT/dhw9x/+lP3Rx91X7q07fevqBYvdt9/f/fDD49266wJE9xXXz3aTYrlsKmpy6rpTU3u3/ue++9+\nV7nM3/4W353k/txzXTfvanK5ysvXhx+6r7OO+//9n/vcue6rreZ+zjmty51zTrTdSy9F3W+6qfz0\nPvc59698JaY3YID7kiWdr/dRR8W8Kq3X9WLiRPeTTnJ/772une4Pf+g+cKB7Y6N7nz7u55/fusx/\n/hNtNG6c+1NPxf8ffbR1uW9/232LLdz/8Af3Hj3cZ87s2rqWuuGGqMsGG8S6W8kVV0S5Rx4p//ob\nb7ibuV92mXu/fu5nnlm+XLKP+MtfYnp33dX5ul96aUzjpJM6P43lNWHCBJfkkoZ5GvvoNCbanX/F\nIePFF+MTPfFEoQG/8Q333Xdv2aj9+7tfcEHh8euvx/v++lf3f/0r/v/wwy3fM3Om+yqruF94ofvo\n0bFClttpfPe77p/8pPuiRe5rreV+6qmty+Ry7g0N7n37xk7g7bdbl3H3jz6P5D5+fPky06e7r7pq\nrMx77VV+x/jAAzGN008vfM5K/vQn9222iXKrrur+pS+5X3SR+yGHxIZccl9zTfdjjqm+03zhhQh3\nQ4a0/DviiK7d2XalpqbYafXuHZ/z6qs7N51333UfNMh9221jx3rddfH9HHqo+7JlXVPXs88uLBsn\nnth6x/7oo7ETP+AA98GD3ffZp2vmW828ee477eT++c9HWCt19dWxEZ82LR4ffniE9uK6NzW5b7KJ\n+3e+E48bGmIdLjVzZkzrT38q7Pxuv718ve6/3/1b33KfP7/869dfH+8fObL6Tsg9dq5TplR+vb2e\nfdb9kkti/W2PXM79t7+NbZAUO7nnn1/+erjHMrnuurFdc3ffd9/W20z32CGuskos083N8Z6TT25Z\nZvHi2L7+7Gfus2bF9u2KKyp/pqeeat9BTyW5XGyv9t678D2Wa5c5c9w/9rF4fbfdyk/rzDMjXHzw\nQSx/n/hE6+3pBx/Edvuss+K1ffZx32ijeL7UQw/FgcCsWeXnd++9sV3Yaqs4SJw0qfLnnDXL/f33\nK7++PAgZHQgZkyfHJ/rXvwoNuN9+saMsttVWkdwT114bX/bcubHgDB4cG6Viv/xlHF3NmVNI8Q89\n1LLMsmVxpJaseEcfHQtguR2A5H7rrYUFtpwjj4x03tAQR23lAsT3vx/zvOkmL5uqc7k4mt5xx/j/\nrru6Dx9eflpPPBEb7i99yf2221ov1M3NsXH8+c+jvU48sXy9Z85033hj9099Ksokf8ceG+8rF7zK\nyeWijUeOjA1fV6xkc+aU39HnctHePXu633NPHNn26dPxHcqHH0a42mAD93feKTx/662xITnooOU7\n4nZ3/+c/ox3POCN2PGaxI0527M89F0Fwt90i7N56a9s7z+U1a5b7Zz/rvvbasSP6wQ9avp7LxfLw\n5S8Xnvv3v6NeDzxQeO6+++K5p56Kx2ecETut0t6zP/4xPndylLz99rGjKTV3buwMpVgPSjf4L74Y\n6/V3vhMBZ8cdY/3/8MPW07rrrkLP0IgR7nfe2bHQ+OGHEYq22y6mYRZt9f3vR89hJXPmRLtJ7iec\n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\nH1hUZot8me1qXd8V+U9SP0mvSNpD0nhJF9PmqbX1+ZIeaaPMu5JGFz1eU9IiSV+rdf1XxD9J90q6\nuuS52yXdQJun1uY5SfuXPFe1jfPhIidpaFGZkZKaJK3X3nmvsD0ZZtZbUoOkh5LnPFphnOLmbOha\naynS8Nz84wbFj7kVt/8rkt4S7b+8fi/pXnd/uOT5bUWbd7X9JD1rZn/JDwtONLMjkxfNbDPFvZaK\n2/x9xQ8K0uad829JI8xssCSZ2TaSdlL+t5Bo8/S1s40/p+W8yamU7g3S0jZAUk+1/onymYqjO3QR\nMzNFN/1j7v5y/un1JC3NL5jFZqqNG+ChMjP7hqTPKgJFqYGizbvaJyQdoxh2PUex8fytmS1295sU\n7eoqv52hzTvnfMVR8xQza1YM25/m7n/Ov06bp689bdzpm5wWW5FDRiWmMuNPWC6XS9pK0ufbUZb2\n7yQz21AR5r7g7ss68lbR5p3VQ9LT7v6z/OMXzOxTiuBxU5X30ead93XFDzV+Q9LLilB9qZm96+43\nVnkfbZ6+9rRxh76HFXa4RNJ7kpoVR3fF1lUbN2BD+5nZ7yTtI2k3d3+36KUZklYxszVL3kL7d16D\npI9LmmBmy8xsmaRdJf3QzJYq2nVV2rxL/U/S5JLnJkvaOP//GYqNKtuZrnOhpPPc/TZ3f8ndb5Z0\niaRT86/T5ulrTxt3+ianxVbYkJE/0pugOOtV0kfd+iOU4s1eVib5gHGApN3d/a2SlycoTgAqbv/N\nFRvnJ7qtktkyTtLWiiO7bfJ/zyqOqJP/LxNt3pUeV+vh1S0kvSlJ7v66YmNb3OZrKoZV2M50Th+1\nPhLOKb8/os3T1842/ugmp0Vv7fBNTlf04ZKLJV1vZhMkPS1ptGIBvq6WlcoCM7tc0ihJ+0tqNLMk\n8S5w98Xu/r6ZXSvpYjObJ+kDSb+V9Li7P12bWq/Y3L1R0X38ETNrlDTH3SfnH9PmXesSSY+b2amS\n/qLYyB6puHw48RtJp5vZq5LekPQLxVVsd3dvVTPjXkmnmdl0SS9JGqbYdl9TVIY2X07537P4pCIU\nSNIn8ifZznX36Wqjjd19ipklNzk9RtIqKrnJabvU+tKaLrg05wf5BlqkSF7b1rpOWfhTHFk0l/k7\nrKjMqvmF7j3FDu82SevWuu5Z+pP0sPKXsNLmqbXxPpJeVNzt+SVJR5Qpc6bikr8PFXeX/mSt672i\n/il+v+FiSa8rfpthqqSzJPWizbu0nXetsB3/Y3vbWHFV4U2KG5XOk3S1pD4dqQc3SAMAAKlYYc/J\nAAAA9Y2QAQAAUkHIAAAAqSBkAACAVBAyAABAKggZAAAgFYQMAACQCkIGAABIBSEDAACkgpABAABS\nQcgAAACp+P/RnHlL9BBLegAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1ef5818ad0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(samples[:, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The slowest run took 6.52 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
      "1 loop, best of 3: 44 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%timeit logp_grad(beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7faa64137210>]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nMdEoqQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa3039b610>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(samples[:, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/edward/inferences/inference.py:214: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.\n",
      "Instructions for updating:\n",
      "Use `tf.global_variables_initializer` instead.\n",
      "Iteration    1 [  0%]: Acceptance Rate = nan\n",
      "Iteration  100 [ 10%]: Acceptance Rate = 1.00\n",
      "Iteration  200 [ 20%]: Acceptance Rate = 1.00\n",
      "Iteration  300 [ 30%]: Acceptance Rate = 1.00\n",
      "Iteration  400 [ 40%]: Acceptance Rate = 1.00\n",
      "Iteration  500 [ 50%]: Acceptance Rate = 1.00\n",
      "Iteration  600 [ 60%]: Acceptance Rate = 1.00\n",
      "Iteration  700 [ 70%]: Acceptance Rate = 1.00\n",
      "Iteration  800 [ 80%]: Acceptance Rate = 1.00\n",
      "Iteration  900 [ 90%]: Acceptance Rate = 1.00\n",
      "Iteration 1000 [100%]: Acceptance Rate = 1.00\n"
     ]
    }
   ],
   "source": [
    "beta = ed.models.Normal(mu=tf.zeros([D, 1]), sigma=tf.ones([D, 1]))\n",
    "qbeta = ed.models.Empirical(params=tf.Variable(tf.zeros([1000, D, 1])), value=tf.zeros([D, 1]))\n",
    "inference = ed.HMC({beta:qbeta})\n",
    "inference.run(step_size=0.5/N, n_steps=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/edward/inferences/inference.py:214: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.\n",
      "Instructions for updating:\n",
      "Use `tf.global_variables_initializer` instead.\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "GraphDef cannot be larger than 2GB.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m\u001b[0m",
      "\u001b[0;31mValueError\u001b[0mTraceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-8f0d0114165d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mqbeta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEmpirical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0minference\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHMC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mbeta\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mqbeta\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0med_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0minference\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/edward/inferences/inference.pyc\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, variables, use_coordinator, *args, **kwargs)\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0mfeed_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m     \u001b[0minit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeed_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0muse_coordinator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, feed_dict, session)\u001b[0m\n\u001b[1;32m   1586\u001b[0m         \u001b[0mnone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdefault\u001b[0m \u001b[0msession\u001b[0m \u001b[0mwill\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mused\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1587\u001b[0m     \"\"\"\n\u001b[0;32m-> 1588\u001b[0;31m     \u001b[0m_run_using_default_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1589\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36m_run_using_default_session\u001b[0;34m(operation, feed_dict, graph, session)\u001b[0m\n\u001b[1;32m   3830\u001b[0m                        \u001b[0;34m\"the operation's graph is different from the session's \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3831\u001b[0m                        \"graph.\")\n\u001b[0;32m-> 3832\u001b[0;31m   \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moperation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3834\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    765\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 767\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    768\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    769\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    963\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    964\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m--> 965\u001b[0;31m                              feed_dict_string, options, run_metadata)\n\u001b[0m\u001b[1;32m    966\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    967\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1013\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1014\u001b[0m       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,\n\u001b[0;32m-> 1015\u001b[0;31m                            target_list, options, run_metadata)\n\u001b[0m\u001b[1;32m   1016\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1017\u001b[0m       return self._do_call(_prun_fn, self._session, handle, feed_dict,\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1020\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1021\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1022\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1023\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1024\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(session, feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m    998\u001b[0m                 run_metadata):\n\u001b[1;32m    999\u001b[0m       \u001b[0;31m# Ensure any changes to the graph are reflected in the runtime.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1000\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1001\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_exception_on_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1002\u001b[0m         return tf_session.TF_Run(session, options,\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_extend_graph\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1042\u001b[0m         graph_def, self._current_version = self._graph._as_graph_def(\n\u001b[1;32m   1043\u001b[0m             \u001b[0mfrom_version\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_current_version\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1044\u001b[0;31m             add_shapes=self._add_shapes)\n\u001b[0m\u001b[1;32m   1045\u001b[0m         \u001b[0;31m# pylint: enable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1046\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36m_as_graph_def\u001b[0;34m(self, from_version, add_shapes)\u001b[0m\n\u001b[1;32m   2218\u001b[0m           \u001b[0mbytesize\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnode_def\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mByteSize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2219\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mbytesize\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m<<\u001b[0m \u001b[0;36m31\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mbytesize\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2220\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"GraphDef cannot be larger than 2GB.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2221\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_functions\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2222\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_functions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: GraphDef cannot be larger than 2GB."
     ]
    }
   ],
   "source": [
    "# MODEL\n",
    "tf_x = tf.constant(x)\n",
    "tf_y = tf.Variable(y)\n",
    "\n",
    "# Standard normal prior on coefficients\n",
    "beta = ed.models.Normal(mu=tf.zeros([D, 1]), sigma=tf.ones([D, 1]))\n",
    "\n",
    "logit_pred = tf.matmul(tf_x, beta)\n",
    "ed_y = ed.models.BernoulliWithSigmoidP(p=logit_pred)\n",
    "\n",
    "# INFERENCE\n",
    "qbeta = ed.models.Empirical(params=tf.Variable(tf.zeros([1000, D, 1])), value=tf.zeros([D, 1]))\n",
    "inference = ed.HMC({beta:qbeta}, data={ed_y:y[:, np.newaxis]})\n",
    "inference.run(step_size=0.5/N, n_steps=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/edward/inferences/inference.py:214: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.\n",
      "Instructions for updating:\n",
      "Use `tf.global_variables_initializer` instead.\n"
     ]
    },
    {
     "ename": "InternalError",
     "evalue": "Dst tensor is not initialized.\n\t [[Node: random_normal/mean = Const[dtype=DT_FLOAT, value=Tensor<type: float shape: [] values: 0>, _device=\"/job:localhost/replica:0/task:0/gpu:0\"]()]]\n\nCaused by op u'random_normal/mean', defined at:\n  File \"/usr/lib/python2.7/runpy.py\", line 162, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"/usr/lib/python2.7/runpy.py\", line 72, in _run_code\n    exec code in run_globals\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/__main__.py\", line 3, in <module>\n    app.launch_new_instance()\n  File \"/usr/local/lib/python2.7/dist-packages/traitlets/config/application.py\", line 658, in launch_instance\n    app.start()\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelapp.py\", line 474, in start\n    ioloop.IOLoop.instance().start()\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/ioloop.py\", line 177, in start\n    super(ZMQIOLoop, self).start()\n  File \"/usr/local/lib/python2.7/dist-packages/tornado/ioloop.py\", line 887, in start\n    handler_func(fd_obj, events)\n  File \"/usr/local/lib/python2.7/dist-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/zmqstream.py\", line 440, in _handle_events\n    self._handle_recv()\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/zmqstream.py\", line 472, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/zmqstream.py\", line 414, in _run_callback\n    callback(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.py\", line 276, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.py\", line 228, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.py\", line 390, in execute_request\n    user_expressions, allow_stdin)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/ipkernel.py\", line 196, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/zmqshell.py\", line 501, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/core/interactiveshell.py\", line 2717, in run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/core/interactiveshell.py\", line 2821, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/core/interactiveshell.py\", line 2881, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-4-db46410dadf5>\", line 13, in <module>\n    qbeta = ed.models.Empirical(params=tf.Variable(tf.random_normal([1000, D, 1])), value=tf.zeros([D, 1]))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/random_ops.py\", line 71, in random_normal\n    mean_tensor = ops.convert_to_tensor(mean, dtype=dtype, name=\"mean\")\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 651, in convert_to_tensor\n    as_ref=False)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 716, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/constant_op.py\", line 176, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/constant_op.py\", line 169, in constant\n    attrs={\"value\": tensor_value, \"dtype\": dtype_value}, name=name).outputs[0]\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2395, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1264, in __init__\n    self._traceback = _extract_stack()\n\nInternalError (see above for traceback): Dst tensor is not initialized.\n\t [[Node: random_normal/mean = Const[dtype=DT_FLOAT, value=Tensor<type: float shape: [] values: 0>, _device=\"/job:localhost/replica:0/task:0/gpu:0\"]()]]\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m\u001b[0m",
      "\u001b[0;31mInternalError\u001b[0mTraceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-db46410dadf5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mqbeta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEmpirical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom_normal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0minference\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHMC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mbeta\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mqbeta\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0med_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0minference\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/edward/inferences/inference.pyc\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, variables, use_coordinator, *args, **kwargs)\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0mfeed_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m     \u001b[0minit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeed_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0muse_coordinator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, feed_dict, session)\u001b[0m\n\u001b[1;32m   1586\u001b[0m         \u001b[0mnone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdefault\u001b[0m \u001b[0msession\u001b[0m \u001b[0mwill\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mused\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1587\u001b[0m     \"\"\"\n\u001b[0;32m-> 1588\u001b[0;31m     \u001b[0m_run_using_default_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1589\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36m_run_using_default_session\u001b[0;34m(operation, feed_dict, graph, session)\u001b[0m\n\u001b[1;32m   3830\u001b[0m                        \u001b[0;34m\"the operation's graph is different from the session's \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3831\u001b[0m                        \"graph.\")\n\u001b[0;32m-> 3832\u001b[0;31m   \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moperation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3834\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    765\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 767\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    768\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    769\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    963\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    964\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m--> 965\u001b[0;31m                              feed_dict_string, options, run_metadata)\n\u001b[0m\u001b[1;32m    966\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    967\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1013\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1014\u001b[0m       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,\n\u001b[0;32m-> 1015\u001b[0;31m                            target_list, options, run_metadata)\n\u001b[0m\u001b[1;32m   1016\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1017\u001b[0m       return self._do_call(_prun_fn, self._session, handle, feed_dict,\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1033\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1034\u001b[0m           \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1035\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode_def\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1036\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1037\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInternalError\u001b[0m: Dst tensor is not initialized.\n\t [[Node: random_normal/mean = Const[dtype=DT_FLOAT, value=Tensor<type: float shape: [] values: 0>, _device=\"/job:localhost/replica:0/task:0/gpu:0\"]()]]\n\nCaused by op u'random_normal/mean', defined at:\n  File \"/usr/lib/python2.7/runpy.py\", line 162, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"/usr/lib/python2.7/runpy.py\", line 72, in _run_code\n    exec code in run_globals\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/__main__.py\", line 3, in <module>\n    app.launch_new_instance()\n  File \"/usr/local/lib/python2.7/dist-packages/traitlets/config/application.py\", line 658, in launch_instance\n    app.start()\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelapp.py\", line 474, in start\n    ioloop.IOLoop.instance().start()\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/ioloop.py\", line 177, in start\n    super(ZMQIOLoop, self).start()\n  File \"/usr/local/lib/python2.7/dist-packages/tornado/ioloop.py\", line 887, in start\n    handler_func(fd_obj, events)\n  File \"/usr/local/lib/python2.7/dist-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/zmqstream.py\", line 440, in _handle_events\n    self._handle_recv()\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/zmqstream.py\", line 472, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"/usr/local/lib/python2.7/dist-packages/zmq/eventloop/zmqstream.py\", line 414, in _run_callback\n    callback(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.py\", line 276, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.py\", line 228, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/kernelbase.py\", line 390, in execute_request\n    user_expressions, allow_stdin)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/ipkernel.py\", line 196, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"/usr/local/lib/python2.7/dist-packages/ipykernel/zmqshell.py\", line 501, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/core/interactiveshell.py\", line 2717, in run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/core/interactiveshell.py\", line 2821, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"/usr/local/lib/python2.7/dist-packages/IPython/core/interactiveshell.py\", line 2881, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-4-db46410dadf5>\", line 13, in <module>\n    qbeta = ed.models.Empirical(params=tf.Variable(tf.random_normal([1000, D, 1])), value=tf.zeros([D, 1]))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/random_ops.py\", line 71, in random_normal\n    mean_tensor = ops.convert_to_tensor(mean, dtype=dtype, name=\"mean\")\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 651, in convert_to_tensor\n    as_ref=False)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 716, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/constant_op.py\", line 176, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/constant_op.py\", line 169, in constant\n    attrs={\"value\": tensor_value, \"dtype\": dtype_value}, name=name).outputs[0]\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2395, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1264, in __init__\n    self._traceback = _extract_stack()\n\nInternalError (see above for traceback): Dst tensor is not initialized.\n\t [[Node: random_normal/mean = Const[dtype=DT_FLOAT, value=Tensor<type: float shape: [] values: 0>, _device=\"/job:localhost/replica:0/task:0/gpu:0\"]()]]\n"
     ]
    }
   ],
   "source": [
    "# MODEL\n",
    "tf_x = tf.Variable(x, trainable=False)\n",
    "tf_y = tf.Variable(y, trainable=False)\n",
    "\n",
    "# Standard normal prior on coefficients\n",
    "beta = ed.models.Normal(mu=tf.zeros([D, 1]), sigma=tf.ones([D, 1]))\n",
    "\n",
    "logit_pred = tf.matmul(tf_x, beta)\n",
    "ed_y = ed.models.BernoulliWithSigmoidP(p=logit_pred)\n",
    "\n",
    "# INFERENCE\n",
    "qbeta = ed.models.Empirical(params=tf.Variable(tf.zeros([1000, D, 1])), value=tf.zeros([D, 1]))\n",
    "inference = ed.HMC({beta:qbeta}, data={ed_y:y[:, np.newaxis]})\n",
    "inference.run(step_size=0.5/N, n_steps=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:VARIABLES collection name is deprecated, please use GLOBAL_VARIABLES instead; VARIABLES will be removed after 2017-03-02.\n",
      "WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/edward/inferences/inference.py:214: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.\n",
      "Instructions for updating:\n",
      "Use `tf.global_variables_initializer` instead.\n",
      "Iteration    1 [  0%]: Acceptance Rate = nan\n",
      "Iteration  100 [ 10%]: Acceptance Rate = 0.87\n",
      "Iteration  200 [ 20%]: Acceptance Rate = 0.89\n",
      "Iteration  300 [ 30%]: Acceptance Rate = 0.89\n",
      "Iteration  400 [ 40%]: Acceptance Rate = 0.88\n",
      "Iteration  500 [ 50%]: Acceptance Rate = 0.88\n",
      "Iteration  600 [ 60%]: Acceptance Rate = 0.89\n",
      "Iteration  700 [ 70%]: Acceptance Rate = 0.89\n",
      "Iteration  800 [ 80%]: Acceptance Rate = 0.89\n",
      "Iteration  900 [ 90%]: Acceptance Rate = 0.89\n",
      "Iteration 1000 [100%]: Acceptance Rate = 0.89\n",
      "Inferred posterior mean:\n",
      "[ 1.26664913  1.24875486]\n",
      "Inferred posterior std:\n",
      "[ 1.01514173  1.02216983]\n"
     ]
    }
   ],
   "source": [
    "# MODEL                                                                                                                                                          \n",
    "z = ed.models.MultivariateNormalFull(\n",
    "    mu=tf.ones(2),\n",
    "    sigma=tf.constant([[1.0, 0.8], [0.8, 1.0]]))\n",
    "\n",
    "qz_val = tf.Variable(tf.random_normal([1000, 2]))\n",
    "qz = ed.models.Empirical(params=qz_val, value=[0, 0])\n",
    "\n",
    "inference = ed.HMC({z: qz})\n",
    "inference.run(step_size=0.5, n_steps=20)\n",
    "\n",
    "# CRITICISM                                                                                                                                                      \n",
    "sess = ed.get_session()\n",
    "mean, std = sess.run([qz.mean(), qz.std()])\n",
    "print(\"Inferred posterior mean:\")\n",
    "print(mean)\n",
    "print(\"Inferred posterior std:\")\n",
    "print(std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.03392557,  0.822245  ],\n",
       "       [ 0.822245  ,  1.00111521]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.cov(sess.run(qz_val)[500:, :].T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NotImplementedError",
     "evalue": "sample_n is not implemented",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m\u001b[0m",
      "\u001b[0;31mNotImplementedError\u001b[0mTraceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-72f17a12152c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# INFERENCE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mqz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEmpirical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom_normal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0minference\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHMC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mqz\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/edward/models/random_variables.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mEmpirical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRandomVariable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistributions_Empirical\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mEmpirical\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/edward/models/random_variable.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__str__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.pyc\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, sample_shape, seed, name, **condition_kwargs)\u001b[0m\n\u001b[1;32m    579\u001b[0m       sample_shape, n = self._expand_sample_shape_to_vector(\n\u001b[1;32m    580\u001b[0m           sample_shape, \"sample_shape\")\n\u001b[0;32m--> 581\u001b[0;31m       \u001b[0msamples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sample_n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcondition_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    582\u001b[0m       \u001b[0mbatch_event_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msamples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m       \u001b[0mfinal_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_event_shape\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.pyc\u001b[0m in \u001b[0;36m_sample_n\u001b[0;34m(self, n, seed)\u001b[0m\n\u001b[1;32m    556\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    557\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_sample_n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 558\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"sample_n is not implemented\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    559\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    560\u001b[0m   def sample(self, sample_shape=(), seed=None, name=\"sample\",\n",
      "\u001b[0;31mNotImplementedError\u001b[0m: sample_n is not implemented"
     ]
    }
   ],
   "source": [
    "\"\"\"Correlated normal posterior. Inference with Hamiltonian Monte Carlo.                                                                                          \n",
    "\"\"\"\n",
    "from __future__ import absolute_import\n",
    "from __future__ import division\n",
    "from __future__ import print_function\n",
    "\n",
    "import edward as ed\n",
    "import tensorflow as tf\n",
    "\n",
    "from edward.models import Empirical, MultivariateNormalFull\n",
    "\n",
    "# ed.set_seed(42)\n",
    "\n",
    "# MODEL                                                                                                                                                          \n",
    "z = MultivariateNormalFull(\n",
    "    mu=tf.ones(2),\n",
    "    sigma=tf.constant([[1.0, 0.8], [0.8, 1.0]]))\n",
    "\n",
    "# INFERENCE                                                                                                                                                      \n",
    "qz = Empirical(params=tf.Variable(tf.random_normal([1000, 2])))\n",
    "\n",
    "inference = ed.HMC({z: qz})\n",
    "inference.run()\n",
    "\n",
    "# CRITICISM                                                                                                                                                      \n",
    "sess = ed.get_session()\n",
    "mean, std = sess.run([qz.mean(), qz.std()])\n",
    "print(\"Inferred posterior mean:\")\n",
    "print(mean)\n",
    "print(\"Inferred posterior std:\")\n",
    "print(std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import edward as ed\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NotImplementedError",
     "evalue": "sample_n is not implemented",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m\u001b[0m",
      "\u001b[0;31mNotImplementedError\u001b[0mTraceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-20750a86429f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNormal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmu\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mqz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEmpirical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m500\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0.0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0minference\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHMC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mqz\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/edward/models/random_variables.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mEmpirical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRandomVariable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistributions_Empirical\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mEmpirical\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/edward/models/random_variable.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__str__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.pyc\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, sample_shape, seed, name, **condition_kwargs)\u001b[0m\n\u001b[1;32m    579\u001b[0m       sample_shape, n = self._expand_sample_shape_to_vector(\n\u001b[1;32m    580\u001b[0m           sample_shape, \"sample_shape\")\n\u001b[0;32m--> 581\u001b[0;31m       \u001b[0msamples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sample_n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcondition_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    582\u001b[0m       \u001b[0mbatch_event_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msamples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m       \u001b[0mfinal_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_event_shape\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.pyc\u001b[0m in \u001b[0;36m_sample_n\u001b[0;34m(self, n, seed)\u001b[0m\n\u001b[1;32m    556\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    557\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_sample_n\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 558\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"sample_n is not implemented\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    559\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    560\u001b[0m   def sample(self, sample_shape=(), seed=None, name=\"sample\",\n",
      "\u001b[0;31mNotImplementedError\u001b[0m: sample_n is not implemented"
     ]
    }
   ],
   "source": [
    "z = ed.models.Normal(mu=0.0, sigma=1.0)\n",
    "x = ed.models.Normal(mu=tf.ones(10) * z, sigma=1.0)\n",
    "\n",
    "qz = ed.models.Empirical(tf.Variable(tf.zeros([500])))\n",
    "data = {x: np.array([0.0] * 10, dtype=np.float32)}\n",
    "inference = ed.HMC({z: qz}, data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
